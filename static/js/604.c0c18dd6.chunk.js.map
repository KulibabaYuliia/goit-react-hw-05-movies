{"version":3,"file":"static/js/604.c0c18dd6.chunk.js","mappings":"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","sources":["components/Api/Api.jsx","components/Error/Error.jsx","components/MovieDetails/MovieDetails.styled.jsx","components/MovieDetails/MovieDetails.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","pages/MovieDetailsPage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = 'f254cc864df015fcbf82561d518eee0b';\n\nexport async function fetchTrendingMovies() {\n  const res = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?language=en-US&api_key=${KEY}`\n  );\n  return res;\n}\n\nexport async function fetchMovieDetails(movieId) {\n  const res = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?language=en-US&api_key=${KEY}`\n  );\n  return res;\n}\n\nexport async function fetchSearchedMovies(movieName) {\n  const res = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${movieName}&language=en-US&api_key=${KEY}`\n  );\n  return res;\n}\n\nexport async function fetchMovieCast(movieId) {\n  const res = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US&api_key=${KEY}`\n  );\n  return res;\n}\n\nexport async function fetchMovieReviews(movieId) {\n  const res = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?language=en-US&api_key=${KEY}&page=1`\n  );\n  return res;\n}\n","import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport const notifyNoResultFound = error =>\n  toast.error(`${error}`, {\n    position: 'top-right',\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: 'light',\n  });\n\nexport const notifyEmtySearch = () =>\n  toast.warn(`Search shouldn't be empty`, {\n    position: 'top-right',\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: 'light',\n  });\n","import styled from '@emotion/styled';\nimport { Link, NavLink } from 'react-router-dom';\n\nexport const GoBackStyled = styled(Link)`\n  display: inline-block;\n  min-width: 100px;\n  border-radius: 4px;\n  border: solid 1px rgba(138, 131, 131, 0.75);\n  box-shadow: 0px 7px 8px -1px rgba(138, 131, 131, 0.75);\n  padding: 4px;\n  text-decoration: none;\n  color: black;\n  margin-bottom: 20px;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    color: orange;\n  }\n`;\n\nexport const MovieWrapper = styled.div`\n  display: flex;\n  gap: 20px;\n  margin-bottom: 20px;\n\n  img {\n    border-radius: 4px;\n  }\n`;\n\nexport const MovieDetailsWrapper = styled.div`\n  display: flex;\n  gap: 10px;\n  max-width: 500px;\n  flex-direction: column;\n  margin-bottom: 20px;\n`;\n\nexport const AdditionalInfoLink = styled(NavLink)`\n  text-decoration: none;\n  color: black;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &.active {\n    color: orange;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport {\n  MovieWrapper,\n  GoBackStyled,\n  MovieDetailsWrapper,\n  AdditionalInfoLink,\n} from './MovieDetails.styled';\nimport defaultPoster from 'components/icons/defaultPoster.png';\nimport { useRef } from 'react';\n\nexport const Movie = ({ movieDetails }) => {\n  const moviePosterUrl = 'https://image.tmdb.org/t/p/w500/';\n  const { title, release_date, overview, vote_average, poster_path, genres } =\n    movieDetails || {};\n  const imageSrc = poster_path ? moviePosterUrl + poster_path : defaultPoster;\n\n  const location = useLocation();\n  const backLinkRef = useRef(location.state?.from ?? '/');\n\n  return (\n    <div>\n      <GoBackStyled to={backLinkRef.current}>&#8592; Go back</GoBackStyled>\n      <MovieWrapper>\n        <img src={imageSrc} alt={title} width=\"300\" />\n        <MovieDetailsWrapper>\n          <h2>\n            {title} ({release_date.slice(0, 4)})\n          </h2>\n          <p>User Score: {vote_average.toFixed(1)}/10</p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          <ul>\n            {genres.map(genre => (\n              <li key={genre.name}>{genre.name}</li>\n            ))}\n          </ul>\n        </MovieDetailsWrapper>\n      </MovieWrapper>\n      <MovieDetailsWrapper>\n        <h3>Additional information</h3>\n        <ul>\n          <li>\n            <AdditionalInfoLink to=\"cast\">Cast</AdditionalInfoLink>\n          </li>\n          <li>\n            <AdditionalInfoLink to=\"reviews\">Reviews</AdditionalInfoLink>\n          </li>\n        </ul>\n      </MovieDetailsWrapper>\n    </div>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n`;\n\nexport const Portrait = styled.img`\n  height: 220px;\n  border-radius: 4px;\n`;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { CastList, Portrait } from './Cast.styled';\nimport defaultPoster from 'components/icons/defaultPortrait.png';\nimport { fetchMovieCast } from 'components/Api/Api';\nimport { notifyNoResultFound } from 'components/Error/Error';\nimport { Loader } from 'components/Loader/Loader';\n\nconst IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const Cast = () => {\n  const [movieCast, setMovieCast] = useState(null);\n  const [loading, setLoading] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        setLoading(true);\n        const { data } = await fetchMovieCast(movieId);\n\n        setMovieCast(data.cast);\n      } catch (error) {\n        setMovieCast(null);\n        notifyNoResultFound(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <>\n      <CastList>\n        {movieCast &&\n          movieCast.map(({ profile_path, name, character }) => (\n            <li key={name}>\n              <Portrait\n                src={profile_path ? IMAGE_URL + profile_path : defaultPoster}\n                alt={name}\n                width=\"150\"\n              />\n              <p>{name}</p>\n              <p>{character}</p>\n            </li>\n          ))}\n      </CastList>\n      {loading && <Loader />}\n    </>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  gap: 20px;\n  flex-direction: column;\n\n  li {\n    max-width: 700px;\n  }\n\n  h3 {\n    margin-bottom: 10px;\n  }\n`;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'components/Api/Api';\nimport { notifyNoResultFound } from 'components/Error/Error';\nimport { Loader } from 'components/Loader/Loader';\nimport { ReviewsList } from './Reviews.styled';\n\nexport const Reviews = () => {\n  const [movieReviews, setMovieReviews] = useState(null);\n  const [loading, setLoading] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchRevies = async () => {\n      try {\n        setLoading(true);\n        const { data } = await fetchMovieReviews(movieId);\n\n        setMovieReviews(data.results);\n      } catch (error) {\n        setMovieReviews(null);\n        notifyNoResultFound(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchRevies();\n  }, [movieId]);\n\n  return (\n    <>\n      {!loading && movieReviews && movieReviews.length !== 0 && (\n        <ReviewsList>\n          {movieReviews.map(({ author, content, id }) => (\n            <li key={id}>\n              <h3>Author: {author}</h3>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ReviewsList>\n      )}\n\n      {!loading && movieReviews?.length === 0 && <div>No reviews yet</div>}\n\n      {loading && <Loader />}\n    </>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useParams, Route, Routes } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport { fetchMovieDetails } from 'components/Api/Api';\n\nimport { notifyNoResultFound } from 'components/Error/Error';\nimport { Loader } from 'components/Loader/Loader';\nimport { Movie } from 'components/MovieDetails/MovieDetails';\nimport { Cast } from 'components/Cast/Cast';\nimport { Reviews } from 'components/Reviews/Reviews';\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [loading, setLoading] = useState(null);\n\n  useEffect(() => {\n    const fetchTodayMovies = async () => {\n      try {\n        setLoading(true);\n        const { data } = await fetchMovieDetails(movieId);\n\n        setMovieDetails(data);\n      } catch (error) {\n        setMovieDetails(null);\n        notifyNoResultFound(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchTodayMovies();\n  }, [movieId]);\n\n  return (\n    <div>\n      {movieDetails && <Movie movieDetails={movieDetails} />}\n      <Routes>\n        <Route path=\"cast\" element={<Cast />} />\n        <Route path=\"reviews\" element={<Reviews />} />\n      </Routes>\n\n      {loading && <Loader />}\n      <ToastContainer />\n    </div>\n  );\n};\n\nexport default MovieDetailsPage;\n"],"names":["KEY","fetchTrendingMovies","axios","res","fetchMovieDetails","movieId","fetchSearchedMovies","movieName","fetchMovieCast","fetchMovieReviews","notifyNoResultFound","error","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","notifyEmtySearch","GoBackStyled","styled","Link","MovieWrapper","MovieDetailsWrapper","AdditionalInfoLink","NavLink","Movie","movieDetails","title","release_date","overview","vote_average","poster_path","genres","imageSrc","location","useLocation","backLinkRef","useRef","state","from","to","current","src","alt","width","slice","toFixed","map","genre","name","CastList","Portrait","Cast","useState","movieCast","setMovieCast","loading","setLoading","useParams","useEffect","fetchCast","data","cast","message","profile_path","character","Loader","ReviewsList","Reviews","movieReviews","setMovieReviews","fetchRevies","results","length","author","content","id","setMovieDetails","fetchTodayMovies","path","element"],"sourceRoot":""}