{"version":3,"file":"static/js/341.62540db6.chunk.js","mappings":"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","sources":["components/Api/Api.jsx","components/Error/Error.jsx","components/MovieDetails/MovieDetails.styled.jsx","components/MovieDetails/MovieDetails.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Reviews/Reviews.jsx","pages/MovieDetailsPage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = 'f254cc864df015fcbf82561d518eee0b';\n\nexport async function fetchTrendingMovies() {\n  const res = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?language=en-US&api_key=${KEY}`\n  );\n  return res;\n}\n\nexport async function fetchMovieDetails(movieId) {\n  const res = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?language=en-US&api_key=${KEY}`\n  );\n  return res;\n}\n\nexport async function fetchSearchedMovies(movieName) {\n  const res = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?query=${movieName}&language=en-US&api_key=${KEY}`\n  );\n  return res;\n}\n\nexport async function fetchMovieCast(movieId) {\n  const res = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US&api_key=${KEY}`\n  );\n  return res;\n}\n\nexport async function fetchMovieReviews(movieId) {\n  const res = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?language=en-US&api_key=${KEY}&page=1`\n  );\n  return res;\n}\n","import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport const notifyNoResultFound = error =>\n  toast.error(`${error}`, {\n    position: 'top-right',\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: 'light',\n  });\n\nexport const notifyEmtySearch = () =>\n  toast.warn(`Search shouldn't be empty`, {\n    position: 'top-right',\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: 'light',\n  });\n","import styled from '@emotion/styled';\n\nexport const MovieWrapper = styled.div`\n  display: flex;\n  gap: 20px;\n`;\n","import { NavLink, useLocation, Link } from 'react-router-dom';\nimport { MovieWrapper } from './MovieDetails.styled';\nimport defaultPoster from 'components/icons/defaultPoster.png';\nimport { useRef } from 'react';\n\nexport const Movie = ({ movieDetails }) => {\n  const moviePosterUrl = 'https://image.tmdb.org/t/p/w500/';\n  const { title, release_date, overview, vote_average, poster_path, genres } =\n    movieDetails || {};\n  const imageSrc = poster_path ? moviePosterUrl + poster_path : defaultPoster;\n\n  const location = useLocation();\n  const backLinkRef = useRef(location.state?.from ?? '/');\n\n  return (\n    <div>\n      <Link to={backLinkRef.current}>Go back</Link>\n      <MovieWrapper>\n        <img src={imageSrc} alt={title} width=\"300\" />\n        <div>\n          <h2>\n            {title} ({release_date.slice(0, 4)})\n          </h2>\n          <p>User Score: {vote_average}</p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          <ul>\n            {genres.map(genre => (\n              <li key={genre.name}>{genre.name}</li>\n            ))}\n          </ul>\n        </div>\n      </MovieWrapper>\n      <div>\n        <p>Additional information</p>\n        <ul>\n          <li>\n            <NavLink to=\"cast\">Cast</NavLink>\n          </li>\n          <li>\n            <NavLink to=\"reviews\">Reviews</NavLink>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n`;\n\nexport const Portrait = styled.img`\n  height: 220px;\n`;\n","// import React, { useState, useEffect } from 'react';\n// import { useParams, Route, Routes, useLocation } from 'react-router-dom';\nimport { CastList, Portrait } from './Cast.styled';\nimport defaultPoster from 'components/icons/defaultPortrait.png';\n\nconst IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const Cast = ({ movieCast }) => {\n  return (\n    <CastList>\n      {movieCast &&\n        movieCast.map(({ profile_path, name, character }) => (\n          <li key={name}>\n            <Portrait\n              src={profile_path ? IMAGE_URL + profile_path : defaultPoster}\n              alt={name}\n              width=\"150\"\n            />\n            <p>{name}</p>\n            <p>{character}</p>\n          </li>\n        ))}\n    </CastList>\n  );\n};\n","// import { CastList } from './Cast.styled';\n\nexport const Reviews = ({ movieReviews }) => {\n  console.log(movieReviews);\n  return movieReviews?.length === 0 || !movieReviews ? (\n    <p>No reviews</p>\n  ) : (\n    <ul>\n      {movieReviews.map(({ author, content, id }) => (\n        <li key={id}>\n          <p>Author: {author}</p>\n          <p>{content}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useParams, Route, Routes, useLocation } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport {\n  fetchMovieDetails,\n  fetchMovieCast,\n  fetchMovieReviews,\n} from 'components/Api/Api';\n\nimport { notifyNoResultFound } from 'components/Error/Error';\nimport { Loader } from 'components/Loader/Loader';\nimport { Movie } from 'components/MovieDetails/MovieDetails';\nimport { Cast } from 'components/Cast/Cast';\nimport { Reviews } from 'components/Reviews/Reviews';\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [movieCast, setMovieCast] = useState(null);\n  const [movieReviews, setMovieReviews] = useState(null);\n  const [loading, setLoading] = useState(null);\n\n  const location = useLocation();\n\n  useEffect(() => {\n    const fetchTodayMovies = async () => {\n      try {\n        setLoading(true);\n        const { data } = await fetchMovieDetails(movieId);\n\n        setMovieDetails(data);\n      } catch (error) {\n        setMovieDetails(null);\n        notifyNoResultFound(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchTodayMovies();\n  }, [movieId]);\n\n  useEffect(() => {\n    if (!location.pathname.includes('cast')) {\n      return;\n    }\n    const fetchCast = async () => {\n      try {\n        setLoading(true);\n        const { data } = await fetchMovieCast(movieId);\n\n        setMovieCast(data.cast);\n      } catch (error) {\n        setMovieCast(null);\n        notifyNoResultFound(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCast();\n  }, [movieId, location.pathname]);\n\n  useEffect(() => {\n    console.log(location.pathname);\n    if (!location.pathname.includes('reviews')) {\n      return;\n    }\n    const fetchRevies = async () => {\n      try {\n        setLoading(true);\n        const { data } = await fetchMovieReviews(movieId);\n\n        setMovieReviews(data.results);\n        console.log(data.results);\n      } catch (error) {\n        setMovieReviews(null);\n        notifyNoResultFound(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchRevies();\n  }, [movieId, location.pathname]);\n\n  return (\n    <div>\n      {movieDetails && <Movie movieDetails={movieDetails} />}\n      <Routes>\n        <Route path=\"cast\" element={<Cast movieCast={movieCast} />} />\n        <Route\n          path=\"reviews\"\n          element={<Reviews movieReviews={movieReviews} />}\n        />\n      </Routes>\n\n      {loading && <Loader />}\n      <ToastContainer />\n    </div>\n  );\n};\n\nexport default MovieDetailsPage;\n"],"names":["KEY","fetchTrendingMovies","axios","res","fetchMovieDetails","movieId","fetchSearchedMovies","movieName","fetchMovieCast","fetchMovieReviews","notifyNoResultFound","error","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","notifyEmtySearch","MovieWrapper","styled","Movie","movieDetails","title","release_date","overview","vote_average","poster_path","genres","imageSrc","location","useLocation","backLinkRef","useRef","state","from","to","current","src","alt","width","slice","map","genre","name","CastList","Portrait","Cast","movieCast","profile_path","character","Reviews","movieReviews","console","log","length","author","content","id","useParams","useState","setMovieDetails","setMovieCast","setMovieReviews","loading","setLoading","useEffect","fetchTodayMovies","data","message","pathname","includes","fetchCast","cast","fetchRevies","results","path","element","Loader"],"sourceRoot":""}